{"version":3,"sources":["features/PlayersList/Player/player.module.scss","features/TeamsList/Team/team.module.scss","features/reducer.ts","app/app-reducer.ts","api/teams-api.ts","features/actions.ts","store.ts","features/PlayersList/Player/Player.tsx","assets/images/spin.svg","components/Spin/Spin.tsx","features/PlayersList/PlayersList.tsx","features/TeamsList/Team/Team.tsx","features/TeamsList/TeamsList.tsx","app/App.tsx","index.tsx"],"names":["module","exports","initialState","teams","players","initState","fetching","instance","axios","create","baseURL","headers","TeamsAPI","get","teamId","fetchTeamsSaga","fetchPlayersSaga","actions","payload","type","put","call","res","data","action","squad","rootWatcher","reducers","combineReducers","TeamInfoReducer","state","appReducer","sagaMiddleWare","createSagaMiddleware","store","createStore","applyMiddleware","takeEvery","run","Player","name","className","s","player","Spin","src","spin","PlayersList","useSelector","history","useHistory","map","i","onClick","push","Team","dispatch","useDispatch","to","style","textDecoration","color","fetchPlayers","team","TeamsList","useEffect","id","App","exact","path","render","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.8ae176c9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"player\":\"player_player__3gfDg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"team\":\"team_team__ZaEf6\"};","import {ActionType} from './actions';\nimport {IPlayer, ITeam} from \"../api/teams-api\";\n\ntype InitialStateType = {\n    teams: ITeam[],\n    players: IPlayer[]\n}\n\nconst initialState:InitialStateType = {\n    teams: [],\n    players: []\n}\n\nexport const TeamInfoReducer = (state:InitialStateType = initialState, action: ActionType):InitialStateType => {\n    switch (action.type) {\n        case 'TEAMS/FETCH_TEAMS':\n            return {\n                ...state, teams: action.payload\n            }\n        case 'TEAMS/FETCH_PLAYERS':\n            return {\n                ...state, players: action.payload\n            }\n        default:\n            return state\n    }\n}\n","interface ICommonState {\n    fetching: boolean\n}\n\nconst initState = {\n    fetching: false,\n}\n\nexport const appReducer = (state: ICommonState = initState, action: ActionsType): ICommonState => {\n    switch (action.type) {\n        case 'APP/START_FETCHING': {\n            return {\n                ...state, fetching: true,\n            }\n        }\n        case 'APP/STOP_FETCHING': {\n            return {\n                ...state, fetching: false,\n            }\n        }\n        default:\n            return state\n    }\n}\n\n\n// export const setAppError = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\n// export const setAppStatus = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\n// export const setAppInitialized = (value: boolean) => ({type: 'APP/SET-IS-INITIALIED', value} as const)\n\n\nexport const startFetching = () => ({type: 'APP/START_FETCHING'} as const)\nexport const stopFetching = () => ({type: 'APP/STOP_FETCHING'} as const)\n\nexport type StartFetchingActionType = ReturnType<typeof startFetching>\nexport type StopFetchingActionType = ReturnType<typeof stopFetching>\n\ntype ActionsType =\n    | StartFetchingActionType\n    | StopFetchingActionType\n\n","import axios from 'axios';\n\nconst settings = {\n    headers: {\n        'X-Auth-Token': '15a24cc3edfb4c64a66c0214e356ebe7',\n    },\n};\n\nconst instance = axios.create({\n    baseURL: 'https://api.football-data.org/v2/',\n    ...settings,\n});\n\nexport const TeamsAPI = {\n    getTeams() {\n        return instance.get<TeamsInfo>('competitions/2017/teams')\n    },\n    getPlayersOfCurrentTeam(teamId: number) {\n        return instance.get<PlayersInfo>(`teams/${teamId}`)\n    },\n}\n\n\n//types\n\nexport type TeamsInfo = {\n    count: number,\n    filters: {},\n    competition: {\n        id: number,\n        area: {\n            id: number, name: string\n        },\n        name: string,\n        code: string,\n        plan: string,\n        lastUpdated: string\n    },\n    season: {\n        id: number,\n        startDate: string,\n        endDate: string,\n        currentMatchday: number,\n        winner: null\n    },\n    teams: ITeam[]\n}\n\nexport interface ITeam {\n    id: number,\n    area: {\n        id: number,\n        name: string\n    },\n    name: string,\n    shortName: string,\n    tla: string,\n    crestUrl: string,\n    address: string,\n    phone: string,\n    website: string,\n    email: string,\n    founded: number,\n    clubColors: string,\n    venue: string,\n    lastUpdated: string\n}\n\nexport type PlayersInfo = {\n    id: number,\n    area: {\n        id: number,\n        name: string\n    },\n    activeCompetitions: [\n        {\n            id: number,\n            area: {\n                id: number,\n                name: string\n            },\n            name: string,\n            code: string,\n            plan: string,\n            lastUpdated: string\n        }\n    ],\n    name: string,\n    shortName: string,\n    tla: string,\n    crestUrl: string,\n    address: string,\n    phone: string,\n    website: string,\n    email: string,\n    founded: number,\n    clubColors: string,\n    venue: string,\n    squad: IPlayer\n}\n\nexport interface IPlayer {\n    id: number,\n    name: string,\n    position: string,\n    dateOfBirth: string,\n    countryOfBirth: string,\n    nationality: string,\n    shirtNumber: null,\n    role: string\n}\n","import {call, put} from \"redux-saga/effects\";\nimport {InferActionTypes} from \"../store\";\nimport {IPlayer, ITeam, TeamsAPI} from \"../api/teams-api\";\nimport {startFetching, stopFetching} from \"../app/app-reducer\";\n\nexport type ActionType = InferActionTypes<typeof actions>\n\n\nexport const actions = {\n    getTeams: (payload: ITeam[]) => ({\n        type: 'TEAMS/FETCH_TEAMS', payload\n    } as const),\n    getPlayers: (payload: IPlayer[]) => ({\n        type: 'TEAMS/FETCH_PLAYERS', payload\n    } as const)\n}\n\n//sagas\n\nexport function* fetchTeamsSaga() {\n    yield put(startFetching())\n\n    const res = yield call(TeamsAPI.getTeams)\n    const teams = res.data.teams\n\n    yield put(actions.getTeams(teams))\n    yield put(stopFetching())\n\n}\n\nexport const fetchTeams = () => ({type: 'TEAMS/FETCH-TEAMS'})\n\nexport function* fetchPlayersSaga(action: ReturnType<typeof fetchPlayers>) {\n    yield put(startFetching())\n\n    const res = yield call(TeamsAPI.getPlayersOfCurrentTeam, action.teamId)\n    const players = res.data.squad\n\n    yield put(actions.getPlayers(players))\n    yield put(stopFetching())\n\n}\n\nexport const fetchPlayers = (teamId: number) => ({type: 'TEAMS/FETCH-PLAYERS', teamId})\n\n\n\n","import {applyMiddleware} from 'redux';\nimport {combineReducers} from 'redux';\nimport {createStore} from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport {TeamInfoReducer} from \"./features/reducer\";\nimport {takeEvery} from 'redux-saga/effects'\nimport {appReducer} from \"./app/app-reducer\";\nimport {fetchPlayersSaga, fetchTeamsSaga} from \"./features/actions\";\n\nlet reducers = combineReducers({\n    TeamInfoReducer,\n    appReducer,\n})\n\nexport type RootState = ReturnType<typeof reducers>\nexport type InferActionTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\n\nconst sagaMiddleWare = createSagaMiddleware()\n\nexport const store = createStore(reducers, applyMiddleware(sagaMiddleWare));\n\nsagaMiddleWare.run(rootWatcher)\n\nfunction* rootWatcher() {\n    yield takeEvery('TEAMS/FETCH-TEAMS', fetchTeamsSaga)\n    yield takeEvery('TEAMS/FETCH-PLAYERS', fetchPlayersSaga)\n}\n\nexport default store\n","import React from 'react';\n// @ts-ignore\nimport s from './player.module.scss'\n\ninterface IProps {\n    name: string,\n}\n\nexport const Player = ({name}: IProps) => {\n\n    return (\n            <div className={s.player}>\n                {name}\n            </div>\n    );\n};\n\n","export default __webpack_public_path__ + \"static/media/spin.7019bd74.svg\";","import React from 'react';\n// @ts-ignore\nimport spin from '../../assets/images/spin.svg';\n\nexport const Spin = () => {\n    return (\n        <>\n            <img src={spin}/>\n        </>\n    );\n};\n","import React, {useEffect} from 'react';\nimport {Player} from './Player/Player';\nimport {Spin} from \"../../components/Spin/Spin\";\nimport {useSelector} from \"react-redux\";\nimport {RootState} from \"../../store\";\nimport {IPlayer} from \"../../api/teams-api\";\nimport {useHistory} from 'react-router-dom';\n\ninterface IProps {\n    fetching: boolean,\n}\n\nexport const PlayersList = ({fetching}: IProps) => {\n    const players = useSelector<RootState, IPlayer[]>(state => state.TeamInfoReducer.players)\n    let history = useHistory();\n\n    const handleClick = () => {\n        history.push(\"/\");\n    }\n\n    return (\n        <>\n            {\n                fetching && <Spin/>\n            }\n            <div>\n                <h2>Players List:</h2>\n                {players.map(i => <Player name={i.name}/>)}\n                <button className={'button'} onClick={handleClick}>Back</button>\n            </div>\n        </>\n    );\n};\n\n","import React from 'react';\nimport {fetchPlayers} from \"../../actions\";\nimport {useDispatch} from \"react-redux\";\nimport {Link} from 'react-router-dom';\n// @ts-ignore\nimport s from './team.module.scss'\n\ninterface IProps {\n    name: string,\n    teamId: number\n}\n\nexport const Team = ({name, teamId}: IProps) => {\n    const dispatch = useDispatch()\n\n    const onClickHandler = () => {\n        dispatch(fetchPlayers(teamId))\n\n    }\n\n    return (\n        <Link to={`/players/${teamId}`} style={{textDecoration: 'none', color: 'black'}}>\n            <div onClick={onClickHandler} className={s.team}>\n                {name}\n            </div>\n        </Link>\n    );\n};\n\n","import React, {useEffect} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {Team} from './Team/Team';\nimport {RootState} from \"../../store\";\nimport {ITeam} from \"../../api/teams-api\";\nimport {fetchTeams} from '../actions';\nimport {Spin} from \"../../components/Spin/Spin\";\n\ninterface IProps {\n    fetching: boolean\n}\n\nexport const TeamsList = ({fetching}: IProps) => {\n    const teams = useSelector<RootState, ITeam[]>(state => state.TeamInfoReducer.teams)\n\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        const action = fetchTeams()\n        dispatch(action)\n    }, [])\n    return (\n        <>\n            {\n                fetching && <Spin/>\n            }\n            <div>\n                <h1>Teams List:</h1>\n                {teams.map(i => <Team name={i.name} key={i.id} teamId={i.id}/>)}\n            </div>\n        </>\n    );\n};\n\n","import React from 'react';\nimport {PlayersList} from '../features/PlayersList/PlayersList';\nimport {TeamsList} from '../features/TeamsList/TeamsList';\nimport './App.css';\nimport {useSelector} from \"react-redux\";\nimport {RootState} from \"../store\";\nimport {HashRouter, Route, Switch} from 'react-router-dom';\n\nconst App = () => {\n    const fetching = useSelector<RootState, boolean>(state => state.appReducer.fetching)\n\n    return (\n        <HashRouter>\n            <div className=\"app-wrapper\">\n                <Switch>\n                    <Route exact path={'/'} render={() => <TeamsList fetching={fetching}/>}/>\n                    <Route path={'/players/:number'} render={() => <PlayersList fetching={fetching}/>}/>\n                </Switch>\n            </div>\n        </HashRouter>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport store from \"./store\";\nimport App from \"./app/App\";\nimport {Provider} from 'react-redux';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}